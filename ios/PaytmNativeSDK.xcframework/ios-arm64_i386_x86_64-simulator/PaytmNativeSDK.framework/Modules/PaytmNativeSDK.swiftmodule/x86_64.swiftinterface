// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PaytmNativeSDK
import SystemConfiguration.CaptiveNetwork
import CoreLocation
import Foundation
@_exported import PaytmNativeSDK
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
public enum AINativeTokenFlowStatus {
  case inProcess
  case appNotInstall
  case error
  public static func == (a: PaytmNativeSDK.AINativeTokenFlowStatus, b: PaytmNativeSDK.AINativeTokenFlowStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum OrderStatus {
  case none
  case pending
  case success
  case failure
  case timeElapsed
  public static func == (a: PaytmNativeSDK.OrderStatus, b: PaytmNativeSDK.OrderStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct UpiCollectConfigurations {
  public init(shouldAllowCustomPolling: Swift.Bool, isAutoPolling: Swift.Bool)
}
public typealias MerchantPaymentCompletionBlock = (PaytmNativeSDK.AINativeTokenFlowStatus) -> Swift.Void
public typealias UPICollectCompletionCallBack = (PaytmNativeSDK.OrderStatus, PaytmNativeSDK.AINativeBaseParameterModel) -> Swift.Void
public typealias ValidateVPA = (([Swift.String : Any]?, Swift.String?) -> Swift.Void)?
public typealias UPIIntentCallBack = ([Swift.String : Any]?, Swift.String?) -> Swift.Void
@objc @_inheritsConvenienceInitializers public class AIHandler : ObjectiveC.NSObject {
  public var mid: Swift.String
  public var orderId: Swift.String
  public var upiCollectPollingCompletion: PaytmNativeSDK.UPICollectCompletionCallBack?
  @objc override dynamic public init()
  @objc deinit
  public var isPaytmAppInstall: Swift.Bool {
    get
  }
}
extension PaytmNativeSDK.AIHandler {
  public class func initWithNotification(appInvokeData: [Swift.String : Any])
  @objc dynamic public func recieveNotificationForUPI(notification: Foundation.NSNotification)
}
extension PaytmNativeSDK.AIHandler {
  public func getEnvironent() -> PaytmNativeSDK.AIEnvironment
  public func setEnvironment(_ env: PaytmNativeSDK.AIEnvironment)
  public func callProcessTransitionAPIForCollect(selectedPayModel: PaytmNativeSDK.AINativeNUPIarameterModel, delegate: PaytmNativeSDK.AIDelegate, upiPollingConfig: PaytmNativeSDK.UpiCollectConfigurations, responseCallback callback: @escaping (([Swift.String : Any]) -> Swift.Void))
  public func callProcessTransactionAPI(selectedPayModel: PaytmNativeSDK.AINativeBaseParameterModel, delegate: PaytmNativeSDK.AIDelegate)
  public func returnPayModesString(paymode: PaytmNativeSDK.AINativePaymentModes) -> Swift.String
  public func returnCardType(selectedPayModel: Swift.AnyObject) -> Swift.String
  public func openPaytm(selectedPayModel: PaytmNativeSDK.AINativeInhouseParameterModel, merchantId: Swift.String, orderId: Swift.String, txnToken: Swift.String, amount: Swift.String, callbackUrl: Swift.String?, delegate: PaytmNativeSDK.AIDelegate, environment: PaytmNativeSDK.AIEnvironment)
  public func callProcessTransactionAPIForUPI(selectedPayModel: PaytmNativeSDK.AINativeNUPIarameterModel, upiPollingConfig: PaytmNativeSDK.UpiCollectConfigurations, delegate: PaytmNativeSDK.AIDelegate, completionForPush: PaytmNativeSDK.MerchantPaymentCompletionBlock?, completionForCollect: (([Swift.String : Any]) -> Swift.Void)?)
  public func callProcessTransactionAPIForUPIIntent(orderId: Swift.String, mid: Swift.String, txnToken: Swift.String, pspApp: PaytmNativeSDK.PspApp, completionHandler: PaytmNativeSDK.UPIIntentCallBack?)
  public func getURLForUPIIntent(orderId: Swift.String, mid: Swift.String) -> Swift.String
  public func getParametersForUPIIntent(orderId: Swift.String, mid: Swift.String, txnToken: Swift.String, pspApp: PaytmNativeSDK.PspApp) -> [Swift.String : Any]
  public func applyOffer()
  public func fetchAllOffers(mid: Swift.String, delegate: PaytmNativeSDK.AIDelegate)
  public func getInstrumentFromLocalVault(custId: Swift.String, mid: Swift.String, ssoToken: Swift.String = "", checksum: Swift.String, delegate: PaytmNativeSDK.AIDelegate)
  public func getParamsForSavedLocalVault(custId: Swift.String, mid: Swift.String, ssoToken: Swift.String = "", checksum: Swift.String) -> [Swift.String : Any]
  public func fetchBin(selectedPayModel: PaytmNativeSDK.AINativeSavedCardParameterModel, delegate: PaytmNativeSDK.AIDelegate)
  public func getAuthToken(clientId: Swift.String, mid: Swift.String, urlScheme: Swift.String? = nil, completion: (PaytmNativeSDK.AINativeTokenFlowStatus) -> Swift.Void)
  public func openRedirectionFlow(selectedPayModel: PaytmNativeSDK.AINativeInhouseParameterModel? = nil, orderId: Swift.String, txnToken: Swift.String, mid: Swift.String, delegate: PaytmNativeSDK.AIDelegate?)
  public func getUPIBalance(bankDetails: [Swift.String : Any], mid: Swift.String, completion: (PaytmNativeSDK.AINativeTokenFlowStatus) -> Swift.Void)
  public func setupUPIPin(bankDetails: [Swift.String : Any], mid: Swift.String, completion: (PaytmNativeSDK.AINativeTokenFlowStatus) -> Swift.Void)
  public func fetchNetBankingChannels(selectedPayModel: PaytmNativeSDK.AINativeNBParameterModel, delegate: PaytmNativeSDK.AIDelegate)
}
extension PaytmNativeSDK.AIHandler {
  public func getSavedVPA() -> Swift.String?
  public func saveVPA(vpa: Swift.String)
  public func getSavedNetBankingMethod() -> Swift.String?
  public func saveNetBankingMethod(channelCode: Swift.String)
}
extension PaytmNativeSDK.AIHandler {
  public func pollingForStatus(selectedPayMode: PaytmNativeSDK.AINativeBaseParameterModel)
  public func isVpaValidated(vpa: Swift.String? = "", upiNumber: Swift.String? = "", mid: Swift.String, tokenType: PaytmNativeSDK.TokenType, token: Swift.String, referenceId: Swift.String, completionHandler: PaytmNativeSDK.ValidateVPA)
}
extension PaytmNativeSDK.AIHandler : PaytmNativeSDK.AIDelegate {
  @objc dynamic public func didFinish(with success: Swift.Bool, response: [Swift.String : Any], error: Swift.String?, withUserCancellation hasUserCancelledTransaction: Swift.Bool)
  @objc dynamic public func openPaymentController(_ controller: UIKit.UIViewController)
}
@objc public enum AlertViewType : Swift.Int {
  case none = 0
  case local
  case service
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias AlertViewWithBlockHandler = (PaytmNativeSDK.JRAlertViewWithBlock?, Swift.Int) -> Swift.Void
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class JRAlertViewWithBlock : UIKit.UIAlertController {
  @objc @_Concurrency.MainActor(unsafe) public var topViewcontroller: UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) public func show()
  @_Concurrency.MainActor(unsafe) public func show(_ handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @_Concurrency.MainActor(unsafe) public func show(_ handler: PaytmNativeSDK.AlertViewWithBlockHandler?, otherButtonhandler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @objc @_Concurrency.MainActor(unsafe) public func show(_ cancelButtonTitle: Swift.String?, handler: PaytmNativeSDK.AlertViewWithBlockHandler?, otherButtonTitles: Swift.String?, otherButtonhandler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @objc @_Concurrency.MainActor(unsafe) public func show(_ cancelButtonTitle: Swift.String?, handler: PaytmNativeSDK.AlertViewWithBlockHandler?, otherButtonTitleList: [Swift.String]?, otherButtonhandler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @objc @_Concurrency.MainActor(unsafe) public class func showAlertView(_ message: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public class func showAlertViewWithMessage(_ message: Swift.String?, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @objc @_Concurrency.MainActor(unsafe) public class func showAlertView(_ title: Swift.String?, message: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public class func showAlertViewWithTitle(_ title: Swift.String?, message: Swift.String?)
  @objc @_Concurrency.MainActor(unsafe) public class func showAlertView(_ title: Swift.String?, message: Swift.String?, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @_Concurrency.MainActor(unsafe) public class func showAlertViewWithTitle(_ title: Swift.String?, message: Swift.String?, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @objc @_Concurrency.MainActor(unsafe) public class func showAlertView(_ title: Swift.String?, message: Swift.String?, cancelButtonTitle: Swift.String?, otherButtonTitles: Swift.String?, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @_Concurrency.MainActor(unsafe) public class func showAlertView(_ title: Swift.String?, message: Swift.String?, controller: UIKit.UIViewController?, cancelButtonTitle: Swift.String?, otherButtonTitles: Swift.String?, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @_Concurrency.MainActor(unsafe) public class func showAlertViewWithLeftAlignment(_ title: Swift.String?, message: Swift.String?, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @objc @_Concurrency.MainActor(unsafe) public class func showError(_ error: Foundation.NSError?)
  @objc @_Concurrency.MainActor(unsafe) public class func showError(_ error: Foundation.NSError?, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PaytmNativeSDK.JRAlertViewWithBlock {
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showError(_ error: Foundation.NSError?, withErrorType errorType: PaytmNativeSDK.AlertViewType)
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showError(_ error: Foundation.NSError?, withErrorType errorType: PaytmNativeSDK.AlertViewType, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showAlertView(_ message: Swift.String?, withErrorType errorType: PaytmNativeSDK.AlertViewType)
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showAlertViewWithMessage(_ message: Swift.String?, withErrorType errorType: PaytmNativeSDK.AlertViewType, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showAlertView(_ title: Swift.String?, message: Swift.String?, withErrorType errorType: PaytmNativeSDK.AlertViewType)
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showAlertViewWithTitle(_ title: Swift.String?, message: Swift.String?, withErrorType errorType: PaytmNativeSDK.AlertViewType)
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showAlertView(_ title: Swift.String?, message: Swift.String?, withErrorType errorType: PaytmNativeSDK.AlertViewType, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @_Concurrency.MainActor(unsafe) public class func showAlertViewWithTitle(_ title: Swift.String?, message: Swift.String?, withErrorType errorType: PaytmNativeSDK.AlertViewType, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
  @objc @_Concurrency.MainActor(unsafe) dynamic public class func showAlertView(_ title: Swift.String?, message: Swift.String?, withErrorType errorType: PaytmNativeSDK.AlertViewType, cancelButtonTitle: Swift.String?, otherButtonTitles: Swift.String?, handler: PaytmNativeSDK.AlertViewWithBlockHandler?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class JRPasscodeTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func deleteBackward()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc(AIDelegate) public protocol AIDelegate {
  @objc func didFinish(with success: Swift.Bool, response: [Swift.String : Any], error: Swift.String?, withUserCancellation hasUserCancelledTransaction: Swift.Bool)
  @objc func openPaymentController(_ controller: UIKit.UIViewController)
}
@objc(AIEnvironment) public enum AIEnvironment : Swift.Int {
  case production
  case staging
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AINativePaymentFlow : Swift.String {
  case hybrid
  case addAndPay
  case none
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public enum AINativePaymentModes : Swift.Int {
  case wallet = 0
  case paymentBank
  case postPaid
  case upi
  case creditCard
  case debitCard
  case netBanking
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum AuthMode : Swift.Int {
  case otp
  case atm
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum AINativeUPIFlow : Swift.String {
  case collect
  case push
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class AINativeConsentView : UIKit.UIView {
  public struct Theme {
    public let backgroundColor: UIKit.UIColor
    public let textFont: UIKit.UIFont
    public let textColor: UIKit.UIColor
    public let selectedCheckboxImage: UIKit.UIImage?
    public let selectedCheckboxTint: UIKit.UIColor
    public let unselectedCheckboxImage: UIKit.UIImage?
    public let unselectedCheckboxTint: UIKit.UIColor
    public init(backgroundColor: UIKit.UIColor, textFont: UIKit.UIFont, textColor: UIKit.UIColor, selectedCheckboxImage: UIKit.UIImage? = nil, selectedCheckboxTint: UIKit.UIColor, unselectedCheckboxImage: UIKit.UIImage? = nil, unselectedCheckboxTint: UIKit.UIColor)
    public static var `default`: PaytmNativeSDK.AINativeConsentView.Theme {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) final public var consentCallback: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension PaytmNativeSDK.AINativeConsentView {
  @_Concurrency.MainActor(unsafe) final public func setBackgroundColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) final public func setFontFamily(_ family: Swift.String)
  @_Concurrency.MainActor(unsafe) final public func setFontSize(_ size: CoreGraphics.CGFloat)
  @_Concurrency.MainActor(unsafe) final public func setFont(_ font: UIKit.UIFont)
  @_Concurrency.MainActor(unsafe) final public func setTextColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) final public func setSelectedCheckmarkImage(_ image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) final public func setSelectedCheckmarkTint(_ tintColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) final public func setUnselectedCheckmarkImage(_ image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) final public func setUnselectedCheckmarkTint(_ tintColor: UIKit.UIColor)
  @_Concurrency.MainActor(unsafe) final public func applyTheme(_ theme: PaytmNativeSDK.AINativeConsentView.Theme)
}
extension Swift.Dictionary {
  public mutating func setValue(value: Any, forKeyPath keyPath: Swift.String)
}
@_hasMissingDesignatedInitializers public class AIPollingModel {
  @objc deinit
}
public enum TokenType : Swift.String {
  case acccess
  case txntoken
  case checksum
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PspApp : Swift.String {
  case paytm
  case gPay
  case phonePe
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class AINativeBaseParameterModel {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AINativeInhouseParameterModel : PaytmNativeSDK.AINativeBaseParameterModel {
  public init(withTransactionToken txnToken: Swift.String, orderId: Swift.String, shouldOpenNativePlusFlow: Swift.Bool, mid: Swift.String, flowType: PaytmNativeSDK.AINativePaymentFlow, paymentModes: PaytmNativeSDK.AINativePaymentModes, redirectionUrl: Swift.String = "https://securegw.paytm.in/theia/paytmCallback", urlScheme: Swift.String? = "")
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AINativeSavedCardParameterModel : PaytmNativeSDK.AINativeBaseParameterModel {
  public init(withTransactionToken txnToken: Swift.String, tokenType: PaytmNativeSDK.TokenType = .txntoken, orderId: Swift.String, shouldOpenNativePlusFlow: Swift.Bool, mid: Swift.String, flowType: PaytmNativeSDK.AINativePaymentFlow, paymentModes: PaytmNativeSDK.AINativePaymentModes, authMode: PaytmNativeSDK.AuthMode, cardId: Swift.String?, cardNumber: Swift.String?, cvv: Swift.String?, expiryDate: Swift.String?, newCard isNewCard: Swift.Bool, saveInstrument: Swift.String, redirectionUrl: Swift.String = "https://securegw.paytm.in/theia/paytmCallback", reference_Id: Swift.String = "", language: Swift.String? = "en", isEligibleForCoft: Swift.Bool? = false, isCoftUserConsent: Swift.Bool? = false, isCardPTCInfoRequired: Swift.Bool = false, urlScheme: Swift.String? = "")
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AITokenizeCardParameterModel : PaytmNativeSDK.AINativeBaseParameterModel {
  public init(withTransactionToken txnToken: Swift.String, tokenType: PaytmNativeSDK.TokenType = .txntoken, orderId: Swift.String, shouldOpenNativePlusFlow: Swift.Bool, mid: Swift.String, flowType: PaytmNativeSDK.AINativePaymentFlow, paymentModes: PaytmNativeSDK.AINativePaymentModes, authMode: PaytmNativeSDK.AuthMode, cardId: Swift.String?, cardNumber: Swift.String?, cvv: Swift.String?, expiryDate: Swift.String?, newCard isNewCard: Swift.Bool, saveInstrument: Swift.String, redirectionUrl: Swift.String = "https://securegw.paytm.in/theia/paytmCallback", reference_Id: Swift.String = "", isTokenizeCard: Swift.Bool? = false, cardToken: Swift.String? = "", tokenExpiry: Swift.String? = "", tAVV: Swift.String? = "", panUniqueRefernce: Swift.String? = "", cardSuffix: Swift.String? = "")
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AINativeNBParameterModel : PaytmNativeSDK.AINativeBaseParameterModel {
  public init(withTransactionToken txnToken: Swift.String, tokenType: PaytmNativeSDK.TokenType = .txntoken, orderId: Swift.String, shouldOpenNativePlusFlow: Swift.Bool, mid: Swift.String, flowType: PaytmNativeSDK.AINativePaymentFlow, paymentModes: PaytmNativeSDK.AINativePaymentModes, channelCode: Swift.String, redirectionUrl: Swift.String = "https://securegw.paytm.in/theia/paytmCallback", reference_Id: Swift.String = "", urlScheme: Swift.String? = "")
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AINativeNUPIarameterModel : PaytmNativeSDK.AINativeBaseParameterModel {
  public init(withTransactionToken txnToken: Swift.String, orderId: Swift.String, shouldOpenNativePlusFlow: Swift.Bool, mid: Swift.String, flowType: PaytmNativeSDK.AINativePaymentFlow, amount: CoreGraphics.CGFloat, paymentModes: PaytmNativeSDK.AINativePaymentModes, vpaAddress: Swift.String, upiFlowType: PaytmNativeSDK.AINativeUPIFlow, merchantInfo: [Swift.String : Any]?, bankDetail: [Swift.String : Any]?, redirectionUrl: Swift.String = "https://securegw.paytm.in/theia/paytmCallback", urlScheme: Swift.String? = "")
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AINativeConsentManager {
  public static let shared: PaytmNativeSDK.AINativeConsentManager
  public func getConsentState() -> Swift.Bool
  @objc deinit
}
public let PRODUCTION_PG_DOMAIN: Swift.String
public let STAGING_PG_DOMAIN: Swift.String
public var kStaging_ServerURL: Swift.String
public var kProduction_ServerURL: Swift.String
public var kStaging_PGServerURL: Swift.String
public var kProduction_PGServerURL: Swift.String
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public var modelName: Swift.String {
    get
  }
}
extension PaytmNativeSDK.AINativeTokenFlowStatus : Swift.Equatable {}
extension PaytmNativeSDK.AINativeTokenFlowStatus : Swift.Hashable {}
extension PaytmNativeSDK.OrderStatus : Swift.Equatable {}
extension PaytmNativeSDK.OrderStatus : Swift.Hashable {}
extension PaytmNativeSDK.AlertViewType : Swift.Equatable {}
extension PaytmNativeSDK.AlertViewType : Swift.Hashable {}
extension PaytmNativeSDK.AlertViewType : Swift.RawRepresentable {}
extension PaytmNativeSDK.AIEnvironment : Swift.Equatable {}
extension PaytmNativeSDK.AIEnvironment : Swift.Hashable {}
extension PaytmNativeSDK.AIEnvironment : Swift.RawRepresentable {}
extension PaytmNativeSDK.AINativePaymentFlow : Swift.Equatable {}
extension PaytmNativeSDK.AINativePaymentFlow : Swift.Hashable {}
extension PaytmNativeSDK.AINativePaymentFlow : Swift.RawRepresentable {}
extension PaytmNativeSDK.AINativePaymentModes : Swift.Equatable {}
extension PaytmNativeSDK.AINativePaymentModes : Swift.Hashable {}
extension PaytmNativeSDK.AINativePaymentModes : Swift.RawRepresentable {}
extension PaytmNativeSDK.AuthMode : Swift.Equatable {}
extension PaytmNativeSDK.AuthMode : Swift.Hashable {}
extension PaytmNativeSDK.AuthMode : Swift.RawRepresentable {}
extension PaytmNativeSDK.AINativeUPIFlow : Swift.Equatable {}
extension PaytmNativeSDK.AINativeUPIFlow : Swift.Hashable {}
extension PaytmNativeSDK.AINativeUPIFlow : Swift.RawRepresentable {}
extension PaytmNativeSDK.TokenType : Swift.Equatable {}
extension PaytmNativeSDK.TokenType : Swift.Hashable {}
extension PaytmNativeSDK.TokenType : Swift.RawRepresentable {}
extension PaytmNativeSDK.PspApp : Swift.Equatable {}
extension PaytmNativeSDK.PspApp : Swift.Hashable {}
extension PaytmNativeSDK.PspApp : Swift.RawRepresentable {}
